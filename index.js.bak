const fs = require('fs');
const path = require('path');
const https = require('https');

const targetFolder = path.join(__dirname, './');
if (!fs.existsSync(targetFolder)) fs.mkdirSync(targetFolder, { recursive: true });

// Function to download a file
function downloadFile(url, outputPath) {
    return new Promise((resolve, reject) => {
        const file = fs.createWriteStream(outputPath);
        https.get(url, (res) => {
            if (res.statusCode !== 200) return reject(`Failed to fetch ${url}: ${res.statusCode}`);
            res.pipe(file);
            file.on('finish', () => file.close(resolve));
        }).on('error', (err) => reject(err));
    });
}

// Download QUEEN_ANITA-V3.js
async function installMainScript() {
    const scriptPath = path.join(targetFolder, 'QUEEN_ANITA-V3.js');
    console.log('CONNECTING TO QUEEN ANITA V3...');
    try {
        await downloadFile('https://anitaiv.vercel.app/QUEEN_ANITA-V3.js', scriptPath);
        console.log('DONE✅.');
    } catch (error) {
        console.error('FAILED TO CONNECT');
        process.exit(1);
    }
}

// Download and run main.js
async function runRemoteScript() {
    const scriptPath = path.join(targetFolder, 'anitav3.js');
    console.log('\nINSTALLING QUEEN ANITA V3 ♻️...');
    try {
        await downloadFile('https://anitaiv.vercel.app/anitav3.js', scriptPath);
        console.log('SUCCESFULLY INSTALLED QUEEN ANITA V3 ✅...');
        require(scriptPath);
    } catch (error) {
        console.error('FAILED TO INSTALL :(');
        process.exit(1);
    }
}

// Main function
(async () => {
    await installMainScript();
    await runRemoteScript();
})();